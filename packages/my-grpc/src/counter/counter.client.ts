/* eslint-disable */
// @generated by protobuf-ts 2.11.0 with parameter ts_nocheck,eslint_disable,generate_dependencies
// @generated from protobuf file "counter/counter.proto" (package "counter", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Counter } from "./counter";
import type { DecrementRequest } from "./counter";
import type { IncrementRequest } from "./counter";
import type { ResetRequest } from "./counter";
import type { SubtractRequest } from "./counter";
import type { AddRequest } from "./counter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CounterValue } from "./counter";
import type { GetValueRequest } from "./counter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service de compteur qui permet différentes opérations
 *
 * @generated from protobuf service counter.Counter
 */
export interface ICounterClient {
    /**
     * Obtenir la valeur actuelle du compteur
     *
     * @generated from protobuf rpc: GetValue
     */
    getValue(input: GetValueRequest, options?: RpcOptions): UnaryCall<GetValueRequest, CounterValue>;
    /**
     * Ajouter une valeur au compteur
     *
     * @generated from protobuf rpc: Add
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, CounterValue>;
    /**
     * Soustraire une valeur du compteur
     *
     * @generated from protobuf rpc: Subtract
     */
    subtract(input: SubtractRequest, options?: RpcOptions): UnaryCall<SubtractRequest, CounterValue>;
    /**
     * Réinitialiser le compteur à une valeur spécifique
     *
     * @generated from protobuf rpc: Reset
     */
    reset(input: ResetRequest, options?: RpcOptions): UnaryCall<ResetRequest, CounterValue>;
    /**
     * Incrémenter le compteur de 1
     *
     * @generated from protobuf rpc: Increment
     */
    increment(input: IncrementRequest, options?: RpcOptions): UnaryCall<IncrementRequest, CounterValue>;
    /**
     * Décrémenter le compteur de 1
     *
     * @generated from protobuf rpc: Decrement
     */
    decrement(input: DecrementRequest, options?: RpcOptions): UnaryCall<DecrementRequest, CounterValue>;
}
/**
 * Service de compteur qui permet différentes opérations
 *
 * @generated from protobuf service counter.Counter
 */
export class CounterClient implements ICounterClient, ServiceInfo {
    typeName = Counter.typeName;
    methods = Counter.methods;
    options = Counter.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Obtenir la valeur actuelle du compteur
     *
     * @generated from protobuf rpc: GetValue
     */
    getValue(input: GetValueRequest, options?: RpcOptions): UnaryCall<GetValueRequest, CounterValue> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetValueRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * Ajouter une valeur au compteur
     *
     * @generated from protobuf rpc: Add
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, CounterValue> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * Soustraire une valeur du compteur
     *
     * @generated from protobuf rpc: Subtract
     */
    subtract(input: SubtractRequest, options?: RpcOptions): UnaryCall<SubtractRequest, CounterValue> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubtractRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * Réinitialiser le compteur à une valeur spécifique
     *
     * @generated from protobuf rpc: Reset
     */
    reset(input: ResetRequest, options?: RpcOptions): UnaryCall<ResetRequest, CounterValue> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * Incrémenter le compteur de 1
     *
     * @generated from protobuf rpc: Increment
     */
    increment(input: IncrementRequest, options?: RpcOptions): UnaryCall<IncrementRequest, CounterValue> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<IncrementRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
    /**
     * Décrémenter le compteur de 1
     *
     * @generated from protobuf rpc: Decrement
     */
    decrement(input: DecrementRequest, options?: RpcOptions): UnaryCall<DecrementRequest, CounterValue> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DecrementRequest, CounterValue>("unary", this._transport, method, opt, input);
    }
}
